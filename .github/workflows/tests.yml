name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.9, 3.10, 3.11]
        django-version: [3.2, 4.2, 5.0]
        database: [sqlite, postgresql, mysql]
        exclude:
          # Exclude incompatible combinations
          - python-version: 3.9
            django-version: 5.0
          - python-version: 3.10
            django-version: 5.0
          - database: mysql
            django-version: 5.0
            python-version: 3.11

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test_db
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_pass
        options: >-
          --health-cmd "mysqladmin ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 3306:3306

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ matrix.django-version }}-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ matrix.django-version }}-
          ${{ runner.os }}-pip-${{ matrix.python-version }}-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libpq-dev default-libmysqlclient-dev build-essential

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        pip install -e ".[dev,test]"
        pip install "django==${{ matrix.django-version }}"
        if [ "${{ matrix.database }}" = "postgresql" ]; then
          pip install psycopg2-binary
        elif [ "${{ matrix.database }}" = "mysql" ]; then
          pip install mysqlclient
        fi

    - name: Run linting
      run: |
        flake8 django_concurrent_test tests/
        black --check django_concurrent_test tests/
        isort --check-only django_concurrent_test tests/

    - name: Run type checking
      run: |
        mypy django_concurrent_test/

    - name: Run security checks
      run: |
        bandit -r django_concurrent_test/
        safety check

    - name: Run tests with SQLite
      if: matrix.database == 'sqlite'
      env:
        DJANGO_ENABLE_CONCURRENT: true
        DJANGO_TEST_WORKERS: 2
        DJANGO_TEST_TIMEOUT: 300
        DJANGO_DEBUG: false
      run: |
        python -m pytest tests/ -v --tb=short --strict-markers --disable-warnings

    - name: Run tests with PostgreSQL
      if: matrix.database == 'postgresql'
      env:
        DJANGO_ENABLE_CONCURRENT: true
        DJANGO_TEST_WORKERS: 2
        DJANGO_TEST_TIMEOUT: 300
        DJANGO_DEBUG: false
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        DJANGO_SECRET_KEY: test-secret-key-for-testing-only
      run: |
        python -m pytest tests/ -v --tb=short --strict-markers --disable-warnings

    - name: Run tests with MySQL
      if: matrix.database == 'mysql'
      env:
        DJANGO_ENABLE_CONCURRENT: true
        DJANGO_TEST_WORKERS: 2
        DJANGO_TEST_TIMEOUT: 300
        DJANGO_DEBUG: false
        DATABASE_URL: mysql://test_user:test_pass@localhost:3306/test_db
        DJANGO_SECRET_KEY: test-secret-key-for-testing-only
      run: |
        python -m pytest tests/ -v --tb=short --strict-markers --disable-warnings

    - name: Run concurrent tests
      env:
        DJANGO_ENABLE_CONCURRENT: true
        DJANGO_TEST_WORKERS: 2
        DJANGO_TEST_TIMEOUT: 300
        DJANGO_DEBUG: false
      run: |
        python -m pytest tests/ --concurrent -v --tb=short --strict-markers --disable-warnings

    - name: Run coverage
      env:
        DJANGO_ENABLE_CONCURRENT: true
        DJANGO_TEST_WORKERS: 2
        DJANGO_TEST_TIMEOUT: 300
        DJANGO_DEBUG: false
      run: |
        python -m pytest tests/ --cov=django_concurrent_test --cov-report=xml --cov-report=html --cov-report=term-missing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: python -m build

    - name: Check package
      run: twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  release:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: release
      url: ${{ steps.release.outputs.html_url }}

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/

    - name: Create Release
      id: release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          ## What's Changed
          
          This is an automated release from the main branch.
          
          ### Features
          - Concurrent test execution with isolated databases
          - Middleware for concurrency safety detection
          - Timing analytics and benchmarking
          - DRF integration support
          - Comprehensive security features
          
          ### Technical Details
          - Python 3.9+ support
          - Django 3.2+ support
          - PostgreSQL, MySQL, and SQLite support
          - Telemetry-free design
          
          ### Installation
          ```bash
          pip install django-concurrent-test
          ```
          
          ### Documentation
          See the [README](https://github.com/${{ github.repository }}/blob/main/README.md) for detailed usage instructions.
        draft: false
        prerelease: false

    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.release.outputs.upload_url }}
        asset_path: ./dist/django_concurrent_test-${{ github.run_number }}-py3-none-any.whl
        asset_name: django_concurrent_test-${{ github.run_number }}-py3-none-any.whl
        asset_content_type: application/octet-stream

    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.release.outputs.upload_url }}
        asset_path: ./dist/django_concurrent_test-${{ github.run_number }}.tar.gz
        asset_name: django_concurrent_test-${{ github.run_number }}.tar.gz
        asset_content_type: application/gzip

  publish:
    runs-on: ubuntu-latest
    needs: release
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: pypi

    steps:
    - uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        packages-dir: dist/ 